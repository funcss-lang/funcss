
@def {
  $e:number {{ return Math.E }}
  $ln10:number {{ return Math.LN10 }}
  $ln2:number {{ return Math.LN2 }}
  $log2e:number {{ return Math.LOG2E }}
  $log10e:number {{ return Math.LOG10E }}
  $pi:number {{ return Math.PI }}
  $sqrt1-2:number {{ return Math.SQRT1_2 }}
  $sqrt2:number {{ return Math.SQRT2 }}
  random():number {{ return Math.random() }}
  abs($x:number):number {{ return Math.abs($x) }}
  acos($x:number):number {{ return Math.acos($x) }}
  asin($x:number):number {{ return Math.asin($x) }}
  atan($x:number):number {{ return Math.atan($x) }}
  roundup(x:number):integer {{ return Math.ceil(x) }}
  cos(x:number):number {{ return Math.cos(x) }}
  exp(x:number):number {{ return Math.exp(x) }}
  exp(x:number, base:number):number {{ return Math.pow(base, x) }}
  rounddown(x:number):integer {{ return Math.floor(x) }}
  log(x:number):number {{ return Math.log(x) }}
  round(x:number):integer {{ return Math.round(x) }}
  sin(x:number):number {{ return Math.sin(x) }}
  sqrt(x:number):number {{ return Math.sqrt(x) }}
  length(x:length,y:length):length {{ return Math.sqrt(x*x+y*y) }}
  tan(x:number):number {{ return Math.tan(x) }}
  atan2(y:number,x:number):number {{ return Math.atan2(y,x) }}
  atan2(y:length,x:length):number {{ return Math.atan2(y,x) }}
  atan2(y:number,x:number):angle {{ return Math.atan2(y,x) }}
  atan2(y:length,x:length):angle {{ return Math.atan2(y,x) }}
  pow(x:number,e:number):number {{ return Math.pow(x,e) }}
  max(x:[<number>#]):number {{ return Math.max.apply(Math,x) }}
  min(x:[<number>#]):number {{ return Math.min.apply(Math,x) }}
  max(x:[<length>#]):length {{ return Math.max.apply(Math,x) }}
  min(x:[<length>#]):length {{ return Math.min.apply(Math,x) }}
  /*imul(x:number):number {{ return Math.imul(x) }}*/
  sign(x:number):integer {{ return Math.sign(x) }}
  /*roundtozero(x:number):integer {{ return Math.trunc(x) }}*/
  sinh(x:number):number {{ return Math.sinh(x) }}
  cosh(x:number):number {{ return Math.cosh(x) }}
  tanh(x:number):number {{ return Math.tanh(x) }}
  asinh(x:number):number {{ return Math.asinh(x) }}
  acosh(x:number):number {{ return Math.acosh(x) }}
  atanh(x:number):number {{ return Math.atanh(x) }}
  log10(x:number):number {{ return Math.log10(x) }}
  log2(x:number):number {{ return Math.log2(x) }}
  /*hypot(x:number):number {{ return Math.hypot(x) }}*/
  /*fround(x:number):number {{ return Math.fround(x) }}*/
  /*clz32(x:number):number {{ return Math.clz32(x) }}*/
  /*cbrt(x:number):number {{ return Math.cbrt(x) }}*/
  /*log1p(x:number):number {{ return Math.log1p(x) }}*/
  /*expm1(x:number):number {{ return Math.expm1(x) }}*/

  /*1pt:length = 0.02px;*/
  
  /*@error threshold(<number>, <number> <number>, <number> <number>) {
    message: "For `threshold()`, you need to specify only one x value at the beginning.";
    position: 6, 13;
  }*/

  threshold($x:number, $y0: number, $y1: number $x1: number):number {{ return $x < $x1 ? $y0 : $y1 }}
  threshold($x:length, $y0: number, $y1: length $x1: number):number {{ return $x < $x1 ? $y0 : $y1 }}
  threshold($x:number, $y0: length, $y1: number $x1: length):length {{ return $x < $x1 ? $y0 : $y1 }}
  threshold($x:length, $y0: length, $y1: length $x1: length):length {{ return $x < $x1 ? $y0 : $y1 }}
  threshold($x:number, $y0: color , $y1: color  $x1: number):color  {{ return $x < $x1 ? $y0 : $y1 }}
  threshold($x:length, $y0: color , $y1: color  $x1: length):color  {{ return $x < $x1 ? $y0 : $y1 }}
  threshold($x:number, $y0: string, $y1: string $x1: number):string {{ return $x < $x1 ? $y0 : $y1 }}
  threshold($x:length, $y0: string, $y1: string $x1: length):string {{ return $x < $x1 ? $y0 : $y1 }}

  threshold($x:number, $y0: color, $a:[[yi:color xi:number]#] ):color  {{ 
    var s = 0, e = $a.length;
    for (var p = Math.floor(e/2); p!=s; ) {
      if ($x < $a[p].xi) {
        e = p;
      } else {
        s = p;
      }
      p = s+Math.floor((e-s)/2);
    }
    return $x < $a[p].xi ? p == 0 ? $y0 : $a[p-1].yi : $a[p].yi;
  }}

  roundup(x:number, modulus:number):number {{ return Math.ceil(x/modulus)*modulus }}
  roundup(x:length, modulus:length):length {{ return Math.ceil(x/modulus)*modulus }}
  roundup(x:angle,  modulus:angle):angle {{ return Math.ceil(x/modulus)*modulus }}
  round(x:number, modulus:number):number {{ return Math.round(x/modulus)*modulus }}
  round(x:length, modulus:length):length {{ return Math.round(x/modulus)*modulus }}
  round(x:angle,  modulus:angle):angle {{ return Math.round(x/modulus)*modulus }}
  rounddown(x:number, modulus:number):number {{ return Math.floor(x/modulus)*modulus }}
  rounddown(x:length, modulus:length):length {{ return Math.floor(x/modulus)*modulus }}
  rounddown(x:angle,  modulus:angle):angle {{ return Math.floor(x/modulus)*modulus }}

  wrap($x:number, $from:number $to:number):number {{ var $l=$to-$from; return $from+(($x-$from)%$l+$l)%$l; }}


  linear(x:number, y0:number x0:number, y1:number x1:number):number {{ return y0 + (x-x0)*(y1-y0)/(x1-x0); }}
  linear(x:length, y0:number x0:length, y1:number x1:length):number {{ return y0 + (x-x0)*(y1-y0)/(x1-x0); }}
  linear(x:time, y0:number x0:time, y1:number x1:time):number {{ return y0 + (x-x0)*(y1-y0)/(x1-x0); }}

  linear(x:number, y0:angle x0:number, y1:angle x1:number):angle {{ return y0 + (x-x0)*(y1-y0)/(x1-x0); }}
  linear(x:length, y0:angle x0:length, y1:angle x1:length):angle {{ return y0 + (x-x0)*(y1-y0)/(x1-x0); }}
  linear(x:time, y0:angle x0:time, y1:angle x1:time):angle {{ return y0 + (x-x0)*(y1-y0)/(x1-x0); }}
  linear(x:angle, y0:angle x0:angle, y1:angle x1:angle):angle {{ return y0 + (x-x0)*(y1-y0)/(x1-x0); }}

  linear(x:length, y1:percentage / x1:length):percentage {{ return x*y1/x1; }}
  linear(x:angle, y1:percentage / x1:angle):percentage {{ return x*y1/x1; }}
  linear(x:number, y1:angle / x1:number):angle {{ return x*y1/x1; }}
  linear(x:number, y1:length / x1:number):length {{ return x*y1/x1; }}
  linear(x:length, y1:number / x1:length):number {{ return x*y1/x1; }}
  linear(x:time, y1:angle / x1:time):angle {{ return x*y1/x1; }}
  linear(x:time, y1:length / x1:time):length {{ return x*y1/x1; }}
  linear(x:time, y1:number / x1:time):number {{ return x*y1/x1; }}

  linear(x:number, y0:angle x0: number, dy:angle / dx:number):angle {{ return y0+(x-x0)*dy/dx; }}
  linear(x:time, y0:number x0: time, dy:number / dx:time):number {{ return y0+(x-x0)*dy/dx; }}

  linear(x:number, y0:length x0:number, y1:length x1:number):length {{ return y0 + (x-x0)*(y1-y0)/(x1-x0); }}
  linear(x:length, y0:length x0:length, y1:length x1:length):length {{ return y0 + (x-x0)*(y1-y0)/(x1-x0); }}
  linear(x:time, y0:length x0:time, y1:length x1:time):length {{ return y0 + (x-x0)*(y1-y0)/(x1-x0); }}

  linear(x:number, y0:color x0:number, y1:color x1:number):color {{
    return {
      r: y0.r + x*(y1.r-y0.r)/(x1-x0),
      g: y0.g + x*(y1.g-y0.g)/(x1-x0),
      b: y0.b + x*(y1.b-y0.b)/(x1-x0)
    }
  }}
  linear(x:length, y0:color x0:length, y1:color x1:length):color {{
    return {
      r: y0.r + x*(y1.r-y0.r)/(x1-x0),
      g: y0.g + x*(y1.g-y0.g)/(x1-x0),
      b: y0.b + x*(y1.b-y0.b)/(x1-x0)
    }
  }}
  linear(x:time, y0:color x0:time, y1:color x1:time):color {{
    return {
      r: y0.r + x*(y1.r-y0.r)/(x1-x0),
      g: y0.g + x*(y1.g-y0.g)/(x1-x0),
      b: y0.b + x*(y1.b-y0.b)/(x1-x0)
    }
  }}

  linear(x:number, y0:time x0:number, y1:time x1:number):time {{ return y0 + (x-x0)*(y1-y0)/(x1-x0); }}
  linear(x:length, y0:time x0:length, y1:time x1:length):time {{ return y0 + (x-x0)*(y1-y0)/(x1-x0); }}

  linear($x:number, $y0: number, $a:[[yi:number xi:number]#], $yn:number ):number  {{ 
    var s = 0, e = $a.length;
    for (var p = Math.floor(e/2); p!=s; ) {
      if ($x < $a[p].xi) {
        e = p;
      } else {
        s = p;
      }
      p = s+Math.floor((e-s)/2);
    }
    if (p == 0 && $x < $a[0].xi) return $y0;
    if (p == $a.length-1 && $x > $a[p].xi) return $yn;
    return $a[p-1].yi + (x-$a[p-1].xi)*($a[p].yi-$a[p-1].yi)/($a[p].xi-$a[p-1].xi);
  }}

  page-mouse-x():length {{
    return (window._funcss_mousePointer || (window._funcss_mousePointer = require("mouse-pointer"))).pageMouseX()
  }}
  page-mouse-y():length {{
    return (window._funcss_mousePointer || (window._funcss_mousePointer = require("mouse-pointer"))).pageMouseY()
  }}
  page-width():length {{
    return (window._funcss_windowSize || (window._funcss_windowSize = require("window-size"))).pageWidth()
  }}
  page-height():length {{
    return (window._funcss_windowSize || (window._funcss_windowSize = require("window-size"))).pageHeight();
  }}
  mouse-wheel-delta():number {{
    return (window._funcss_mouseWheel || (window._funcss_mouseWheel = require("mouse-wheel"))).mouseWheelDelta();
  }}
  seconds():time {{
    return (window._funcss_timer || (window._funcss_timer = require("timer"))).get().getSeconds()
  }}
  minutes():time {{
    return (window._funcss_timer || (window._funcss_timer = require("timer"))).get().getMinutes()
  }}
  hours():time {{
    return (window._funcss_timer || (window._funcss_timer = require("timer"))).get().getHours()
  }}
  seconds():number {{
    return (window._funcss_timer || (window._funcss_timer = require("timer"))).get().getSeconds()
  }}
  minutes():number {{
    return (window._funcss_timer || (window._funcss_timer = require("timer"))).get().getMinutes()
  }}
  hours():number {{
    return (window._funcss_timer || (window._funcss_timer = require("timer"))).get().getHours()
  }}
  time-since-load():time {{
    return (window._funcss_timer || (window._funcss_timer = require("timer"))).getTimeSinceLoad()
  }}
  time-since(page-load):time {{
    return (window._funcss_timer || (window._funcss_timer = require("timer"))).getTimeSinceLoad()
  }}
  rgb(r:number, g:number, b:number):color {{ return {r:r,g:g,b:b}; }}
  

  /*best()*/

  white:color = #fff;
  black:color = #000;
  red:color = #ff0000;
  yellow:color = #ffff00;
  blue:color = #0000ff;
  green:color = #008000;
  lime: color= #00ff00;
  teal: color = #008080;
  aqua: color = #00ffff;
  silver: color = #c0c0c0;


  hsl(h:percentage, s:percentage, l:percentage):color {{
    function hue2rgb(m1, m2, h) {
      if (h < 0) h = h+1;
      if (h > 1) h = h-1;
      if (h*6<1) return m1+(m2-m1)*h*6;
      if (h*2<1) return m2;
      if (h*3<2) return m1+(m2-m1)*(2/3-h)*6;
      return m1;
    }
    var m1, m2;
    if (l<=0.5) {
      m2 = l*(s+1);
    } else {
      m2 = l+s-l*s;
    }
    m1  = l*2-m2;
    return {
      r: hue2rgb(m1, m2, h+1/3)*255,
      g: hue2rgb(m1, m2, h    )*255,
      b: hue2rgb(m1, m2, h-1/3)*255
    };
  }}


  
  /**rgb(r:color, g:color: b:color):color = --css-rgb(r,g,b);**/

  /**@prop background-color: <color>;**/
  /*@prop opacity: <number>;*/

  /* conversions */

  string(x:number):string {{ return x; }}
  number(x:length px):number {{ return x; }}

  /* string methods */
  substring(s:string, start:integer to end:integer):string {{
    return s.substring(start-1, end)
  }}

  substring(s:string, start:integer until end:integer):string {{
    return s.substring(start-1, end-1)
  }}


}


