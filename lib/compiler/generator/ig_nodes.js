// Generated by CoffeeScript 1.9.2
(function() {
  var Autorun, BlockStatement, CssStylesheet, CustomFunction, DomReady, Expression, FunctionBlock, JSCode, ListenerManagerDataSource, Rule, SetDeclarationValue, Statement, camel,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  exports.camel = camel = function(s) {
    if (s.match(/^--/)) {
      return s;
    }
    return s.toLowerCase().replace(/-([a-z])/g, function(s) {
      return s.charAt(1).toUpperCase();
    });
  };

  exports.JSCode = JSCode = (function() {
    function JSCode() {}

    return JSCode;

  })();

  exports.Statement = Statement = (function(superClass) {
    extend(Statement, superClass);

    function Statement() {
      return Statement.__super__.constructor.apply(this, arguments);
    }

    return Statement;

  })(JSCode);

  exports.BlockStatement = BlockStatement = (function(superClass) {
    extend(BlockStatement, superClass);

    function BlockStatement() {
      var value;
      value = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      this.value = value;
    }

    BlockStatement.prototype.push = function(newStatement) {
      return this.value.push(newStatement);
    };

    return BlockStatement;

  })(Statement);

  exports.FunctionBlock = FunctionBlock = (function(superClass) {
    extend(FunctionBlock, superClass);

    function FunctionBlock() {
      return FunctionBlock.__super__.constructor.apply(this, arguments);
    }

    FunctionBlock.prototype.toString = function() {
      if (this.value.length) {
        return "(function(){\n" + (this.value.join('\n')) + "\n})();";
      } else {
        return "";
      }
    };

    return FunctionBlock;

  })(BlockStatement);

  exports.CssStylesheet = CssStylesheet = (function(superClass) {
    extend(CssStylesheet, superClass);

    function CssStylesheet(value, name) {
      this.value = value;
      this.name = name != null ? name : "S";
    }

    CssStylesheet.prototype.toString = function() {
      return "var " + this.name + " = document.createElement(\"style\");\n" + this.name + ".innerHTML=" + (JSON.stringify("" + this.value)) + ";\ndocument.head.appendChild(" + this.name + ");";
    };

    return CssStylesheet;

  })(Statement);

  exports.Rule = Rule = (function(superClass) {
    extend(Rule, superClass);

    function Rule(cssStylesheet, index) {
      this.cssStylesheet = cssStylesheet;
      this.index = index;
    }

    Rule.prototype.toString = function() {
      return "var rule" + this.index + " = " + this.cssStylesheet.name + ".sheet.cssRules[" + this.index + "];";
    };

    return Rule;

  })(Statement);

  exports.CustomFunction = CustomFunction = (function(superClass) {
    extend(CustomFunction, superClass);

    function CustomFunction() {
      return CustomFunction.__super__.constructor.apply(this, arguments);
    }

    CustomFunction.prototype.toString = function() {
      return "function " + this.name + "() {\n  " + (this.value.join("\n")) + "\n  return " + this.returnValue + "\n}";
    };

    return CustomFunction;

  })(BlockStatement);

  exports.ListenerManagerDataSource = ListenerManagerDataSource = (function(superClass) {
    extend(ListenerManagerDataSource, superClass);

    function ListenerManagerDataSource(name, eventType, valueOutsideEventHandler, valueInsideEventHandler) {
      this.name = name;
      this.eventType = eventType;
      this.valueOutsideEventHandler = valueOutsideEventHandler;
      this.valueInsideEventHandler = valueInsideEventHandler;
    }

    ListenerManagerDataSource.prototype.toString = function() {
      return "var " + this.name + " = function() {\n    var active = false;\n    var rv = new ReactiveVar;\n    var activeDependentsById = {};\n    var handler = function(event) {\n        for (var id in activeDependentsById) {\n            rv.set(" + this.valueInsideEventHandler + ");\n            return;\n        }\n        document.removeEventListener(\"" + this.eventType + "\", handler, false);\n        active = false;\n    };\n    return function(){\n        var computation = Tracker.currentComputation;\n        if (computation && !(computation._id in activeDependentsById)) {\n            activeDependentsById[computation._id] = computation;\n            computation.onInvalidate(function() {\n                if (computation.stopped) {\n                    delete activeDependentsById[computation._id];\n                }\n            })\n        }\n        if (!active) {\n            document.addEventListener(\"" + this.eventType + "\", handler, false);\n            active = true;\n            rv.set(" + this.valueOutsideEventHandler + ");\n        }\n        return rv.get();\n    };\n}();";
    };

    return ListenerManagerDataSource;

  })(Statement);

  exports.Expression = Expression = (function(superClass) {
    extend(Expression, superClass);

    function Expression() {
      return Expression.__super__.constructor.apply(this, arguments);
    }

    return Expression;

  })(JSCode);

  exports.Autorun = Autorun = (function(superClass) {
    extend(Autorun, superClass);

    function Autorun() {
      return Autorun.__super__.constructor.apply(this, arguments);
    }

    Autorun.prototype.toString = function() {
      return "Tracker.autorun(function() {\n  " + (this.value.join("\n")) + "\n});";
    };

    return Autorun;

  })(BlockStatement);

  exports.DomReady = DomReady = (function(superClass) {
    extend(DomReady, superClass);

    function DomReady() {
      return DomReady.__super__.constructor.apply(this, arguments);
    }

    DomReady.prototype.toString = function() {
      return "window.addEventListener(\"load\", function() {\n  " + (this.value.join("\n")) + "\n});";
    };

    return DomReady;

  })(BlockStatement);

  exports.SetDeclarationValue = SetDeclarationValue = (function(superClass) {
    extend(SetDeclarationValue, superClass);

    function SetDeclarationValue(ruleIndex, name, value) {
      this.ruleIndex = ruleIndex;
      this.name = name;
      this.value = value;
    }

    SetDeclarationValue.prototype.toString = function() {
      debugger;
      return "rule" + this.ruleIndex + ".style[" + (JSON.stringify(camel(this.name))) + "] = " + (this.value.ssjs()) + ";";
    };

    return SetDeclarationValue;

  })(Statement);

}).call(this);
