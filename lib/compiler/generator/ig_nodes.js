// Generated by CoffeeScript 1.9.1
(function() {
  var IG, assert, camel,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  assert = require("../helpers/assert");

  IG = exports;

  IG.camel = camel = function(s) {
    if (s.match(/^--/)) {
      return s;
    }
    return s.toLowerCase().replace(/-([a-z])/g, function(s) {
      return s.charAt(1).toUpperCase();
    });
  };

  IG.JSCode = (function() {
    function JSCode() {}

    JSCode.prototype.optimize = function() {
      return this;
    };

    return JSCode;

  })();

  IG.Statement = (function(superClass) {
    extend(Statement, superClass);

    function Statement() {
      return Statement.__super__.constructor.apply(this, arguments);
    }

    return Statement;

  })(IG.JSCode);

  IG.Empty = (function(superClass) {
    extend(Empty, superClass);

    function Empty() {
      return Empty.__super__.constructor.apply(this, arguments);
    }

    Empty.prototype.toString = function() {
      return "";
    };

    return Empty;

  })(IG.Statement);

  IG.Require = (function(superClass) {
    extend(Require, superClass);

    function Require(fileName) {
      this.fileName = fileName;
    }

    Require.prototype.toString = function() {
      return "require(" + (JSON.stringify(this.fileName)) + ");";
    };

    return Require;

  })(IG.Statement);

  IG.BlockStatement = (function(superClass) {
    extend(BlockStatement, superClass);

    function BlockStatement() {
      var value;
      value = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      this.value = value;
    }

    BlockStatement.prototype.push = function(newStatement) {
      return this.value.push(newStatement);
    };

    BlockStatement.prototype.optimize = function() {
      var i, optimized, v;
      optimized = BlockStatement.__super__.optimize.apply(this, arguments);
      v = optimized.value;
      i = 0;
      while (i < v.length) {
        if (v[i] instanceof IG.Sequence) {
          v.splice.apply(v, [i, 1].concat(slice.call(v[i].value)));
        } else if (i > 0 && v[i - 1] instanceof IG.DomReady && v[i] instanceof IG.DomReady) {
          v[i - 1].value = v[i - 1].value.concat(v[i].value);
          v.splice(i, 1);
        } else {
          ++i;
        }
      }
      return optimized;
    };

    return BlockStatement;

  })(IG.Statement);

  IG.Sequence = (function(superClass) {
    extend(Sequence, superClass);

    function Sequence() {
      return Sequence.__super__.constructor.apply(this, arguments);
    }

    Sequence.prototype.toString = function() {
      return this.value.join('\n');
    };

    return Sequence;

  })(IG.BlockStatement);

  IG.FunctionBlock = (function(superClass) {
    extend(FunctionBlock, superClass);

    function FunctionBlock() {
      return FunctionBlock.__super__.constructor.apply(this, arguments);
    }

    FunctionBlock.prototype.toString = function() {
      if (this.value.length) {
        return "(function(){\n" + (this.value.join('\n')) + "\n})();";
      } else {
        return "";
      }
    };

    return FunctionBlock;

  })(IG.BlockStatement);

  IG.CssStylesheet = (function(superClass) {
    extend(CssStylesheet, superClass);

    function CssStylesheet(value, name) {
      this.value = value;
      this.name = name != null ? name : "S";
    }

    CssStylesheet.prototype.toString = function() {
      return "var " + this.name + " = document.createElement(\"style\");\ndocument.getElementsByTagName('head')[0].appendChild(" + this.name + ");\nvar " + this.name + "_content = " + (JSON.stringify("" + this.value)) + ";\n" + this.name + ".sheet ?\n  " + this.name + ".innerHTML = " + this.name + "_content :\n  " + this.name + ".styleSheet.cssText = " + this.name + "_content;";
    };

    return CssStylesheet;

  })(IG.Statement);

  IG.Rule = (function(superClass) {
    extend(Rule, superClass);

    function Rule(cssStylesheet, index) {
      this.cssStylesheet = cssStylesheet;
      this.index = index;
    }

    Rule.prototype.toString = function() {
      return "var rule" + this.index + " = " + this.cssStylesheet.name + ".sheet ? " + this.cssStylesheet.name + ".sheet.cssRules[" + this.index + "] : " + this.cssStylesheet.name + ".styleSheet.rules[" + this.index + "];";
    };

    return Rule;

  })(IG.Statement);

  IG.CustomFunction = (function(superClass) {
    extend(CustomFunction, superClass);

    function CustomFunction() {
      return CustomFunction.__super__.constructor.apply(this, arguments);
    }

    CustomFunction.prototype.toString = function() {
      return "function " + this.name + "() {\n  " + (this.value.join("\n")) + "\n  return " + this.returnValue + "\n}";
    };

    return CustomFunction;

  })(IG.BlockStatement);

  IG.ListenerManagerDataSource = (function(superClass) {
    extend(ListenerManagerDataSource, superClass);

    function ListenerManagerDataSource(name, eventType, valueOutsideEventHandler, valueInsideEventHandler) {
      this.name = name;
      this.eventType = eventType;
      this.valueOutsideEventHandler = valueOutsideEventHandler;
      this.valueInsideEventHandler = valueInsideEventHandler;
    }

    ListenerManagerDataSource.prototype.toString = function() {
      return "var " + this.name + " = function() {\n    var active = false;\n    var rv = new ReactiveVar;\n    var activeDependentsById = {};\n    var handler = function(event) {\n        for (var id in activeDependentsById) {\n            rv.set(" + this.valueInsideEventHandler + ");\n            return;\n        }\n        document.removeEventListener(\"" + this.eventType + "\", handler, false);\n        active = false;\n    };\n    return function(){\n        var computation = Tracker.currentComputation;\n        if (computation && !(computation._id in activeDependentsById)) {\n            activeDependentsById[computation._id] = computation;\n            computation.onInvalidate(function() {\n                if (computation.stopped) {\n                    delete activeDependentsById[computation._id];\n                }\n            })\n        }\n        if (!active) {\n            document.addEventListener(\"" + this.eventType + "\", handler, false);\n            active = true;\n            rv.set(" + this.valueOutsideEventHandler + ");\n        }\n        return rv.get();\n    };\n}();";
    };

    return ListenerManagerDataSource;

  })(IG.Statement);

  IG.Expression = (function(superClass) {
    extend(Expression, superClass);

    function Expression() {
      return Expression.__super__.constructor.apply(this, arguments);
    }

    return Expression;

  })(IG.JSCode);

  IG.Autorun = (function(superClass) {
    extend(Autorun, superClass);

    function Autorun() {
      return Autorun.__super__.constructor.apply(this, arguments);
    }

    Autorun.prototype.toString = function() {
      return "Tracker.autorun(function() {\n  " + (this.value.join("\n")) + "\n});";
    };

    return Autorun;

  })(IG.BlockStatement);

  IG.DomReady = (function(superClass) {
    extend(DomReady, superClass);

    function DomReady() {
      return DomReady.__super__.constructor.apply(this, arguments);
    }

    DomReady.prototype.toString = function() {
      return "(function() {\n  var _funcss_dom_loaded = false;\n  function ready() {\n    if (_funcss_dom_loaded) return;\n    _funcss_dom_loaded = true;\n    " + (this.value.join("\n")) + "\n  }\n  (document.addEventListener || document.attachEvent)(\"DOMContentLoaded\", ready);\n  (document.addEventListener || document.attachEvent)(\"readystatechange\", ready);\n})();";
    };

    return DomReady;

  })(IG.BlockStatement);

  IG.SetDeclarationValue = (function(superClass) {
    extend(SetDeclarationValue, superClass);

    function SetDeclarationValue(ruleIndex, name, value) {
      this.ruleIndex = ruleIndex;
      this.name = name;
      this.value = value;
      assert.present({
        value: this.value,
        name: this.name,
        ruleIndex: this.ruleIndex
      });
    }

    SetDeclarationValue.prototype.toString = function() {
      return "rule" + this.ruleIndex + ".style[" + (JSON.stringify(camel(this.name))) + "] = " + (this.value.ssjs()) + ";";
    };

    return SetDeclarationValue;

  })(IG.Statement);

}).call(this);
