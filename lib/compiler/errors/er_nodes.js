// Generated by CoffeeScript 1.9.1
(function() {
  var ER,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ER = exports;

  ER.FunCSSError = (function(superClass) {
    extend(FunCSSError, superClass);

    function FunCSSError(message) {
      this.message = message;
      this.stack = this.message + "\n" + (new Error()).stack;
    }

    return FunCSSError;

  })(Error);

  ER.TypeError = (function(superClass) {
    extend(TypeError, superClass);

    function TypeError() {
      return TypeError.__super__.constructor.apply(this, arguments);
    }

    return TypeError;

  })(ER.FunCSSError);

  ER.SyntaxError = (function(superClass) {
    extend(SyntaxError, superClass);

    function SyntaxError() {
      return SyntaxError.__super__.constructor.apply(this, arguments);
    }

    return SyntaxError;

  })(ER.FunCSSError);

  ER.UnknownAtRule = (function(superClass) {
    extend(UnknownAtRule, superClass);

    function UnknownAtRule(name) {
      this.name = name;
      UnknownAtRule.__super__.constructor.call(this, "Unknown at rule: " + this.name);
    }

    return UnknownAtRule;

  })(ER.FunCSSError);

  ER.BlockRequired = (function(superClass) {
    extend(BlockRequired, superClass);

    function BlockRequired(name) {
      this.name = name;
      this.message = "Block required for " + this.name;
      this.stack = this.message + "\n" + (new Error()).stack;
    }

    return BlockRequired;

  })(ER.SyntaxError);

  ER.TypeInferenceNotImplemented = (function(superClass) {
    extend(TypeInferenceNotImplemented, superClass);

    function TypeInferenceNotImplemented(definable) {
      this.definable = definable;
      this.message = "Automatic type inference is not yet implemented. Please provide an explicit type for " + this.definable;
      this.stack = this.message + "\n" + (new Error()).stack;
    }

    return TypeInferenceNotImplemented;

  })(ER.TypeError);

  ER.NotImplemented = (function(superClass) {
    extend(NotImplemented, superClass);

    function NotImplemented(message) {
      this.message = message;
      NotImplemented.__super__.constructor.call(this, this.message);
    }

    return NotImplemented;

  })(ER.TypeError);

  ER.UnknownAtRule = (function(superClass) {
    extend(UnknownAtRule, superClass);

    function UnknownAtRule(atRuleName) {
      this.atRuleName = atRuleName;
      UnknownAtRule.__super__.constructor.call(this, "Unknown at-rule: " + this.atRuleName);
    }

    return UnknownAtRule;

  })(ER.SyntaxError);

  ER.UnknownProperty = (function(superClass) {
    extend(UnknownProperty, superClass);

    function UnknownProperty(propertyName) {
      this.propertyName = propertyName;
      UnknownProperty.__super__.constructor.call(this, "Unknown property: " + this.propertyName);
    }

    return UnknownProperty;

  })(ER.TypeError);

  ER.UnknownType = (function(superClass) {
    extend(UnknownType, superClass);

    function UnknownType(typeName) {
      this.typeName = typeName;
      this.message = "Unknown type: " + this.typeName;
      this.stack = this.message + "\n" + (new Error()).stack;
    }

    return UnknownType;

  })(ER.TypeError);

  ER.DecodingNotSupported = (function(superClass) {
    extend(DecodingNotSupported, superClass);

    function DecodingNotSupported(type) {
      this.type = type;
      DecodingNotSupported.__super__.constructor.call(this, "Decoding from JS is not supported for type " + this.type);
    }

    return DecodingNotSupported;

  })(ER.TypeError);

  ER.InvalidColor = (function(superClass) {
    extend(InvalidColor, superClass);

    function InvalidColor(color) {
      this.color = color;
      InvalidColor.__super__.constructor.call(this, "Invalid color: " + this.color);
    }

    return InvalidColor;

  })(ER.TypeError);

}).call(this);
