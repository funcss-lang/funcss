// Generated by CoffeeScript 1.9.2
(function() {
  var SS, Stream, Tokenizer,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Stream = require("../helpers/stream");

  SS = require("./ss_nodes");

  Tokenizer = (function() {
    var MAX_ALLOWED_CODE_POINT, MAX_SURROGATE_CODE_POINT, MIN_SURROGATE_CODE_POINT;

    function Tokenizer() {}

    Tokenizer.prototype.tokenize = function(string) {
      var token, tokens;
      this.init(string);
      tokens = [];
      while (!((token = this.consume_a_token()) instanceof SS.EOFToken)) {
        tokens.push(token);
      }
      return tokens;
    };

    Tokenizer.prototype.init = function(string) {
      this.stream = string.split("");
      return this.current = void 0;
    };

    Tokenizer.prototype.consume_next = function() {
      if (this.stream.length) {
        return this.current = this.stream.shift();
      } else {
        return this.current = "EOF";
      }
    };

    Tokenizer.prototype.next = function() {
      if (this.stream.length) {
        return this.stream[0];
      } else {
        return "EOF";
      }
    };

    Tokenizer.prototype.next2 = function() {
      if (this.stream.length > 1) {
        return this.stream[1];
      } else {
        return "EOF";
      }
    };

    Tokenizer.prototype.next3 = function() {
      if (this.stream.length > 2) {
        return this.stream[2];
      } else {
        return "EOF";
      }
    };

    Tokenizer.prototype.reconsume_current = function() {
      this.stream.unshift(this.current);
      return this.current = void 0;
    };

    Tokenizer.prototype.is_digit = function(c) {
      return ("0" <= c && c <= "9");
    };

    Tokenizer.prototype.is_hex_digit = function(c) {
      return this.is_digit(c) || ("A" <= c && c <= "F") || ("a" <= c && c <= "f");
    };

    Tokenizer.prototype.is_uppercase_letter = function(c) {
      return ("A" <= c && c <= "Z");
    };

    Tokenizer.prototype.is_lowercase_letter = function(c) {
      return ("a" <= c && c <= "z");
    };

    Tokenizer.prototype.is_letter = function(c) {
      return this.is_uppercase_letter(c) || this.is_lowercase_letter(c);
    };

    Tokenizer.prototype.is_non_ASCII = function(c) {
      return c.charCodeAt(0) >= 0x80;
    };

    Tokenizer.prototype.is_name_start_code_point = function(c) {
      return c !== "EOF" && this.is_letter(c) || this.is_non_ASCII(c) || c === "_";
    };

    Tokenizer.prototype.is_name_code_point = function(c) {
      return this.is_name_start_code_point(c) || this.is_digit(c) || c === "-";
    };

    Tokenizer.prototype.is_non_printable = function(c) {
      var cc;
      cc = c.charCodeAt(0);
      return indexOf.call([0, 1, 2, 3, 4, 5, 6, 7, 8], cc) >= 0 || cc === 0xB || indexOf.call([14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], cc) >= 0 || cc === 0x7F;
    };

    Tokenizer.prototype.is_newline = function(c) {
      return c === "\n";
    };

    Tokenizer.prototype.is_whitespace = function(c) {
      return this.is_newline(c) || c === "\t" || c === " ";
    };

    MIN_SURROGATE_CODE_POINT = 0xD800;

    MAX_SURROGATE_CODE_POINT = 0xDFFF;

    Tokenizer.prototype.is_surrogate_code_point = function(c) {
      var i, ref, results;
      return ref = c.charCodeAt(0), indexOf.call((function() {
        results = [];
        for (var i = MIN_SURROGATE_CODE_POINT; MIN_SURROGATE_CODE_POINT <= MAX_SURROGATE_CODE_POINT ? i <= MAX_SURROGATE_CODE_POINT : i >= MAX_SURROGATE_CODE_POINT; MIN_SURROGATE_CODE_POINT <= MAX_SURROGATE_CODE_POINT ? i++ : i--){ results.push(i); }
        return results;
      }).apply(this), ref) >= 0;
    };

    MAX_ALLOWED_CODE_POINT = 0x10FFFF;

    Tokenizer.prototype.consume_a_token = function() {
      var is_id, ref;
      this.consume_next();
      switch (false) {
        case !this.is_whitespace(this.current):
          while (this.is_whitespace(this.next())) {
            this.consume_next();
          }
          return new SS.WhitespaceToken();
        case this.current !== "\"":
          return this.consume_a_string_token("\"");
        case this.current !== "#":
          if (this.is_name_code_point(this.next()) || this.next_2_valid_escape()) {
            is_id = this.next_3_starts_identifier();
            return new SS.HashToken(this.consume_a_name(), is_id ? "id" : void 0);
          } else {
            return new SS.DelimToken(this.current);
          }
          break;
        case this.current !== "$":
          if (this.next() === "=") {
            this.consume_next();
            return new SS.SuffixMatchToken();
          } else {
            return new SS.DelimToken(this.current);
          }
          break;
        case this.current !== "'":
          return this.consume_a_string_token("'");
        case this.current !== "(":
          return new SS.OpeningParenToken;
        case this.current !== ")":
          return new SS.ClosingParenToken;
        case this.current !== "*":
          if (this.next() === "=") {
            this.consume_next();
            return new SS.SubstringMatchToken();
          } else {
            return new SS.DelimToken(this.current);
          }
          break;
        case this.current !== "+":
          if (this.starts_with_number()) {
            this.reconsume_current();
            return this.consume_a_numeric_token();
          } else {
            return new SS.DelimToken(this.current);
          }
          break;
        case this.current !== ",":
          return new SS.CommaToken();
        case this.current !== "-":
          if (this.starts_with_number()) {
            this.reconsume_current();
            return this.consume_a_numeric_token();
          } else if (this.next() === "-" && this.next2() === ">") {
            this.consume_next();
            this.consume_next();
            return new SS.CDCToken();
          } else if (this.starts_with_ident()) {
            this.reconsume_current();
            return this.consume_an_ident_like_token();
          } else {
            return new SS.DelimToken(this.current);
          }
          break;
        case this.current !== ".":
          if (this.starts_with_number()) {
            this.reconsume_current();
            return this.consume_a_numeric_token();
          } else {
            return new SS.DelimToken(this.current);
          }
          break;
        case this.current !== "/":
          if (this.next() === "*") {
            this.consume_next();
            while (this.next() !== "EOF" && !(this.next() === "*" && this.next2() === "/")) {
              this.consume_next();
            }
            if (this.next() === "*" && this.next2() === "/") {
              this.consume_next();
              this.consume_next();
            }
            return this.consume_a_token();
          } else {
            return new SS.DelimToken(this.current);
          }
          break;
        case this.current !== ":":
          return new SS.ColonToken();
        case this.current !== ";":
          return new SS.SemicolonToken();
        case this.current !== "<":
          if (this.next() === "!" && this.next2() === "-" && this.next3() === "-") {
            this.consume_next();
            this.consume_next();
            this.consume_next();
            return new SS.CDOToken();
          } else {
            return new SS.DelimToken(this.current);
          }
          break;
        case this.current !== "@":
          if (this.next_3_starts_identifier()) {
            return new SS.AtKeywordToken(this.consume_a_name());
          } else {
            return new SS.DelimToken(this.current);
          }
          break;
        case this.current !== "[":
          return new SS.OpeningSquareToken;
        case this.current !== "\\":
          if (this.starts_with_valid_escape()) {
            this.reconsume_current();
            return this.consume_an_ident_like_token();
          } else {
            return new SS.DelimToken(this.current);
          }
          break;
        case this.current !== "]":
          return new SS.ClosingSquareToken;
        case this.current !== "^":
          if (this.next() === "=") {
            this.consume_next();
            return new SS.PrefixMatchToken();
          } else {
            return new SS.DelimToken(this.current);
          }
          break;
        case this.current !== "{":
          return new SS.OpeningCurlyToken;
        case this.current !== "}":
          return new SS.ClosingCurlyToken;
        case !(("0" <= (ref = this.current) && ref <= "9")):
          this.reconsume_current();
          return this.consume_a_numeric_token();
        case !this.is_name_start_code_point(this.current):
          this.reconsume_current();
          return this.consume_an_ident_like_token();
        case this.current !== "|":
          if (this.next() === "=") {
            this.consume_next();
            return new SS.DashMatchToken();
          } else if (this.next() === "|") {
            this.consume_next();
            return new SS.ColumnToken();
          } else {
            return new SS.DelimToken(this.current);
          }
          break;
        case this.current !== "~":
          if (this.next() === "=") {
            this.consume_next();
            return new SS.IncludeMatchToken();
          } else {
            return new SS.DelimToken(this.current);
          }
          break;
        case this.current !== "EOF":
          return new SS.EOFToken();
        default:
          return new SS.DelimToken(this.current);
      }
    };

    Tokenizer.prototype.consume_a_numeric_token = function() {
      var number;
      number = this.consume_a_number();
      if (this.next_3_starts_identifier()) {
        return new SS.DimensionToken(number.repr, number.value, number.type, this.consume_a_name());
      } else if (this.next() === "%") {
        this.consume_next();
        return new SS.PercentageToken(number.repr, number.value);
      } else {
        return new SS.NumberToken(number.repr, number.value, number.type);
      }
    };

    Tokenizer.prototype.consume_an_ident_like_token = function() {
      var lowerCase, name;
      name = this.consume_a_name();
      lowerCase = name.toLowerCase();
      if (lowerCase === "url" && this.next() === "(") {
        this.consume_next();
        return this.consume_a_url_token();
      } else if (this.next() === "(") {
        this.consume_next();
        return new SS.FunctionToken(name);
      } else {
        return new SS.IdentToken(name);
      }
    };

    Tokenizer.prototype.consume_a_string_token = function(delim) {
      var s;
      s = [];
      while (true) {
        this.consume_next();
        switch (false) {
          case !(this.current === delim || this.current === "EOF"):
            return new SS.StringToken(s.join(""));
          case this.current !== "\n":
            this.reconsume_current();
            return new SS.BadStringToken;
          case this.current !== "\\":
            if (this.next() === "EOF") {

            } else if (this.next() === "\n") {
              this.consume_next();
            } else {
              s.push(this.consume_an_escaped_code_point());
            }
            break;
          default:
            s.push(this.current);
        }
      }
    };

    Tokenizer.prototype.consume_a_url_token = function() {
      var ref, ref1, ref2, ref3, ref4, s;
      s = [];
      while (this.is_whitespace(this.next())) {
        this.consume_next();
      }
      if (this.next() === "EOF") {
        return new SS.UrlToken(s.join(''));
      }
      if ((ref = this.next()) === "'" || ref === '"') {
        this.consume_next();
        SS.stringToken = this.consume_a_string_token(this.current);
        if (SS.stringToken instanceof SS.BadStringToken) {
          return new SS.BadUrlToken;
        }
        while (this.is_whitespace(this.next())) {
          this.consume_next();
        }
        if ((ref1 = this.next()) === ")" || ref1 === "EOF") {
          this.consume_next();
          return new SS.UrlToken(SS.stringToken.value);
        } else {
          this.consume_the_remnants_of_a_bad_url();
          return new SS.BadUrlToken;
        }
      }
      while (true) {
        this.consume_next();
        switch (false) {
          case (ref2 = this.current) !== ")" && ref2 !== "EOF":
            return new SS.UrlToken(s.join(''));
          case !this.is_whitespace(this.current):
            while (this.is_whitespace(this.next())) {
              this.consume_next();
            }
            if ((ref3 = this.next()) === ")" || ref3 === "EOF") {
              this.consume_next();
              return new SS.UrlToken(s.join(''));
            } else {
              this.consume_the_remnants_of_a_bad_url();
              return new SS.BadUrlToken;
            }
            break;
          case !(((ref4 = this.current) === '"' || ref4 === "'" || ref4 === "(") || this.is_non_printable(this.current)):
            this.consume_the_remnants_of_a_bad_url();
            return new SS.BadUrlToken;
          case this.current !== "\\":
            if (this.starts_with_valid_escape()) {
              s.push(this.consume_an_escaped_code_point());
            } else {
              this.consume_the_remnants_of_a_bad_url();
              return new SS.UrlToken(s.join(''));
            }
            break;
          default:
            s.push(this.current);
        }
      }
    };

    Tokenizer.prototype.consume_a_unicode_range_token = function() {
      throw "unicode range tokens not implemented yet";
    };

    Tokenizer.prototype.consume_an_escaped_code_point = function() {
      var count, digits, i, number, results;
      this.consume_next();
      switch (false) {
        case !this.is_hex_digit(this.current):
          digits = [this.current];
          count = 1;
          while (this.is_hex_digit(this.next()) && count < 6) {
            digits.push(this.consume_next());
            ++count;
          }
          if (this.is_whitespace(this.next())) {
            this.consume_next();
          }
          number = parseInt(digits.join(''), 16);
          if (number === 0 || indexOf.call((function() {
            results = [];
            for (var i = MIN_SURROGATE_CODE_POINT; MIN_SURROGATE_CODE_POINT <= MAX_SURROGATE_CODE_POINT ? i <= MAX_SURROGATE_CODE_POINT : i >= MAX_SURROGATE_CODE_POINT; MIN_SURROGATE_CODE_POINT <= MAX_SURROGATE_CODE_POINT ? i++ : i--){ results.push(i); }
            return results;
          }).apply(this), number) >= 0 || number > MAX_ALLOWED_CODE_POINT) {
            return "\ufffd";
          }
          break;
        case this.current !== "EOF":
          return "\ufffd";
        default:
          return this.current;
      }
    };

    Tokenizer.prototype.starts_with_valid_escape = function() {
      return this.is_valid_escape(this.current, this.next());
    };

    Tokenizer.prototype.next_2_valid_escape = function() {
      return this.is_valid_escape(this.next(), this.next2());
    };

    Tokenizer.prototype.is_valid_escape = function(c1, c2) {
      if (c1 !== "\\") {
        return false;
      }
      if (c2 === "\n") {
        return false;
      }
      return true;
    };

    Tokenizer.prototype.starts_with_ident = function() {
      return this.starts_identifier(this.current, this.next(), this.next2());
    };

    Tokenizer.prototype.next_3_starts_identifier = function() {
      return this.starts_identifier(this.next(), this.next2(), this.next3());
    };

    Tokenizer.prototype.starts_identifier = function(c1, c2, c3) {
      switch (false) {
        case c1 !== "-":
          if (this.is_name_start_code_point(c2) || c2 === "-" || this.is_valid_escape(c2, c3)) {
            return true;
          } else {
            return false;
          }
          break;
        case !this.is_name_start_code_point(c1):
          return true;
        case c1 !== "\\":
          if (this.is_valid_escape(c1, c2)) {
            return true;
          } else {
            return false;
          }
          break;
        default:
          return false;
      }
    };

    Tokenizer.prototype.starts_with_number = function() {
      return this.starts_number(this.current, this.next(), this.next2());
    };

    Tokenizer.prototype.starts_number = function(c1, c2, c3) {
      switch (false) {
        case c1 !== "+" && c1 !== "-":
          if (this.is_digit(c2)) {
            return true;
          }
          if (c2 === "." && this.is_digit(c3)) {
            return true;
          }
          return false;
        case c1 !== ".":
          if (this.is_digit(c2)) {
            return true;
          }
          return false;
        case !this.is_digit(c1):
          return true;
        default:
          return false;
      }
    };

    Tokenizer.prototype.consume_a_name = function() {
      var s;
      s = [];
      while (true) {
        this.consume_next();
        switch (false) {
          case !this.is_name_code_point(this.current):
            s.push(this.current);
            break;
          case !this.starts_with_valid_escape():
            s.push(this.consume_an_escaped_code_point());
            break;
          default:
            this.reconsume_current();
            return s.join('');
        }
      }
    };

    Tokenizer.prototype.consume_a_number = function() {
      var ref, ref1, ref2, repr, type, value;
      repr = [];
      type = "integer";
      if ((ref = this.next()) === "+" || ref === '-') {
        repr.push(this.consume_next());
      }
      while (this.is_digit(this.next())) {
        repr.push(this.consume_next());
      }
      if (this.next() === "." && this.is_digit(this.next2())) {
        repr.push(this.consume_next());
        repr.push(this.consume_next());
        type = "number";
        while (this.is_digit(this.next())) {
          repr.push(this.consume_next());
        }
      }
      if (((ref1 = this.next()) === "e" || ref1 === "E") && (this.is_digit(this.next2()) || ((ref2 = this.next2()) === '-' || ref2 === '+') && this.is_digit(this.next3()))) {
        repr.push(this.consume_next());
        if (!this.is_digit(this.next())) {
          repr.push(this.consume_next());
        }
        repr.push(this.consume_next());
        type = "number";
        while (this.is_digit(this.next())) {
          repr.push(this.consume_next());
        }
      }
      repr = repr.join('');
      value = this.string_to_number(repr);
      return {
        repr: repr,
        value: value,
        type: type
      };
    };

    Tokenizer.prototype.string_to_number = function(s) {
      return parseFloat(s);
    };

    Tokenizer.prototype.consume_the_remnants_of_a_bad_url = function() {
      while (true) {
        this.consume_next();
        switch (false) {
          case !(this.current === ")" || this.current === "EOF"):
            return;
          case !this.starts_with_valid_escape():
            this.consume_an_escaped_code_point();
        }
      }
    };

    return Tokenizer;

  })();

  module.exports = new Tokenizer;

}).call(this);
