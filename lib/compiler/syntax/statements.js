// Generated by CoffeeScript 1.9.1
(function() {
  var Parser, SS, k, ref, v;

  Parser = require("./parser");

  SS = require("./ss_nodes");

  SS.Statement = (function() {
    function Statement(prelude1, block1) {
      this.prelude = prelude1;
      this.block = block1 != null ? block1 : void 0;
    }

    Statement.prototype.toString = function() {
      var ref;
      return "" + this.prelude + ((ref = this.block) != null ? ref : ';');
    };

    return Statement;

  })();

  SS.StatementList = (function() {
    function StatementList() {}

    StatementList.prototype = [];

    StatementList.prototype.toString = function() {
      return this.join("\n");
    };

    return StatementList;

  })();

  ref = {
    parse_a_statement: function(tokens) {
      var result;
      this.init(tokens);
      this.consume_next();
      while (this.current instanceof SS.WhitespaceToken) {
        this.consume_next();
      }
      if (this.current instanceof SS.EOFToken) {
        return new SS.SyntaxError;
      }
      if (this.current instanceof SS.AtKeywordToken) {
        result = this.consume_at_rule();
      } else {
        this.reconsume_current();
        result = this.consume_a_statement();
        if (result == null) {
          return new SS.SyntaxError;
        }
      }
      this.consume_next();
      while (this.current instanceof SS.WhitespaceToken) {
        this.consume_next();
      }
      if (this.current instanceof SS.EOFToken) {
        return result;
      }
      return new SS.SyntaxError;
    },
    parse_list_of_statements: function(tokens) {
      this.init(tokens);
      return this.consume_list_of_statements();
    },
    consume_list_of_statements: function() {
      var result, statement;
      result = new SS.StatementList;
      while (true) {
        this.consume_next();
        switch (false) {
          case !(this.current instanceof SS.WhitespaceToken || this.current instanceof SS.SemicolonToken):
            "do nothing";
            break;
          case !(this.current instanceof SS.EOFToken):
            return result;
          case !(this.current instanceof SS.AtKeywordToken):
            result.push(this.consume_at_rule());
            break;
          default:
            this.reconsume_current();
            statement = this.consume_a_statement();
            if (statement != null) {
              result.push(statement);
            }
        }
      }
    },
    consume_a_statement: function() {
      var block, prelude;
      prelude = new SS.ComponentValueList;
      while (true) {
        this.consume_next();
        switch (false) {
          case !(this.current instanceof SS.EOFToken || this.current instanceof SS.SemicolonToken):
            return new SS.Statement(prelude);
          case !(this.current instanceof SS.OpeningCurlyToken):
            block = this.consume_simple_block();
            return new SS.Statement(prelude, block);
          case !(this.current instanceof SS.SimpleBlock && this.current.token instanceof SS.OpeningCurlyToken):
            return new SS.Statement(prelude, this.current);
          default:
            this.reconsume_current();
            prelude.push(this.consume_component_value());
        }
      }
    }
  };
  for (k in ref) {
    v = ref[k];
    Parser.constructor.prototype[k] = v;
  }

}).call(this);
