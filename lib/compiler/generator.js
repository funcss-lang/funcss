// Generated by CoffeeScript 1.9.2
(function() {
  var IG, SG, SS, k, ref, v;

  IG = require("./generator/ig_nodes");

  SG = require("./semantics/sg_nodes");

  SS = require("./syntax/ss_nodes");

  ref = {
    puppetRules: function() {
      var index, pr, sr;
      return this._puppetRules != null ? this._puppetRules : this._puppetRules = (function() {
        var i, len, ref, results;
        ref = this.simpleRules;
        results = [];
        for (index = i = 0, len = ref.length; i < len; index = ++i) {
          sr = ref[index];
          pr = new SS.QualifiedRule(sr.selector);
          pr.index = index;
          sr.puppetRule = pr;
          results.push(pr);
        }
        return results;
      }).call(this);
    },
    puppetStylesheet: function() {
      return this._puppetStylesheet != null ? this._puppetStylesheet : this._puppetStylesheet = new SS.Stylesheet(this.puppetRules());
    },
    js: function() {
      var i, j, js, len, len1, pss, ref, ref1, sr;
      js = new IG.FunctionBlock;
      js.push(pss = new IG.CssStylesheet(this.puppetStylesheet()));
      ref = this.simpleRules;
      for (i = 0, len = ref.length; i < len; i++) {
        sr = ref[i];
        js.push(new IG.Rule(pss, sr.puppetRule.index));
      }
      ref1 = this.simpleRules;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        sr = ref1[j];
        js.push(new IG.DomReady(new IG.Autorun(new IG.SetDeclarationValue(sr.puppetRule.index, sr.name, sr.value))));
      }
      return js;
    }
  };
  for (k in ref) {
    v = ref[k];
    SG.SemanticGraph.prototype[k] = v;
  }

  module.exports = function(sg) {
    if (!(sg instanceof SG.SemanticGraph)) {
      throw new Error("Generator should be called with a SemanticGraph");
    }
    return sg.js();
  };

}).call(this);
