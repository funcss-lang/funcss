// Generated by CoffeeScript 1.9.2
(function() {
  var And, Collection, CommaDelimitedCollection, Constant, EmptyValue, FunctionalNotation, InclusiveOr, Juxtaposition, Marking, Number, Percentage, String, Value, escape,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  exports.escape = escape = function(s) {
    return s;
  };

  exports.Value = Value = (function() {
    function Value() {}

    return Value;

  })();

  exports.Constant = Constant = (function(superClass) {
    extend(Constant, superClass);

    function Constant() {
      return Constant.__super__.constructor.apply(this, arguments);
    }

    return Constant;

  })(Value);

  exports.Keyword = Constant = (function(superClass) {
    extend(Constant, superClass);

    function Constant(value) {
      this.value = value;
    }

    Constant.prototype.jsjs = function() {
      return JSON.stringify(this.value);
    };

    Constant.prototype.ssjs = function() {
      return JSON.stringify("" + (escape(this.value)));
    };

    return Constant;

  })(Constant);

  exports.Percentage = Percentage = (function(superClass) {
    extend(Percentage, superClass);

    function Percentage(value) {
      this.value = value;
    }

    Percentage.prototype.jsjs = function() {
      return JSON.stringify(this.value / 100);
    };

    Percentage.prototype.ssjs = function() {
      return JSON.stringify(this.value + "%");
    };

    return Percentage;

  })(Constant);

  exports.Number = Number = (function(superClass) {
    extend(Number, superClass);

    function Number(value) {
      this.value = value;
    }

    Number.prototype.jsjs = function() {
      return JSON.stringify(this.value);
    };

    return Number;

  })(Constant);

  exports.EmptyValue = EmptyValue = (function(superClass) {
    extend(EmptyValue, superClass);

    function EmptyValue() {
      return EmptyValue.__super__.constructor.apply(this, arguments);
    }

    EmptyValue.prototype.jsjs = function() {
      return "(void 0)";
    };

    EmptyValue.prototype.ssjs = function() {
      return JSON.stringify("");
    };

    return EmptyValue;

  })(Constant);

  exports.String = String = (function(superClass) {
    extend(String, superClass);

    function String() {
      return String.__super__.constructor.apply(this, arguments);
    }

    String.prototype.jsjs = function() {
      return JSON.stringify(this.value);
    };

    String.prototype.ssjs = function() {
      return JSON.stringify(JSON.stringify(this.value));
    };

    return String;

  })(Constant);

  exports.Collection = Collection = (function(superClass) {
    extend(Collection, superClass);

    function Collection(value) {
      this.value = value;
    }

    Collection.prototype.delimiter = " ";

    Collection.prototype.unshift = function(x) {
      return this.value.unshift(x);
    };

    Collection.prototype.jsjs = function() {
      var i;
      return "[" + (((function() {
        var j, len, ref, results;
        ref = this.value;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          i = ref[j];
          results.push(i.jsjs());
        }
        return results;
      }).call(this)).join(", ")) + "]";
    };

    Collection.prototype.ssjs = function() {
      var e, elems, i;
      elems = (function() {
        var j, len, ref, results;
        ref = this.value;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          i = ref[j];
          results.push(i.ssjs());
        }
        return results;
      }).call(this);
      elems = (function() {
        var j, len, results;
        results = [];
        for (j = 0, len = elems.length; j < len; j++) {
          e = elems[j];
          if (e !== '""') {
            results.push(e);
          }
        }
        return results;
      })();
      if (elems.length) {
        return elems.join(" + " + (JSON.stringify(this.delimiter)) + " + ");
      } else {
        return JSON.stringify("");
      }
    };

    return Collection;

  })(Value);

  exports.CommaDelimitedCollection = CommaDelimitedCollection = (function(superClass) {
    extend(CommaDelimitedCollection, superClass);

    function CommaDelimitedCollection() {
      return CommaDelimitedCollection.__super__.constructor.apply(this, arguments);
    }

    CommaDelimitedCollection.prototype.delimiter = ", ";

    return CommaDelimitedCollection;

  })(Collection);

  exports.Juxtaposition = Juxtaposition = (function(superClass) {
    extend(Juxtaposition, superClass);

    function Juxtaposition() {
      return Juxtaposition.__super__.constructor.apply(this, arguments);
    }

    return Juxtaposition;

  })(Collection);

  exports.And = And = (function(superClass) {
    extend(And, superClass);

    function And() {
      return And.__super__.constructor.apply(this, arguments);
    }

    return And;

  })(Collection);

  exports.InclusiveOr = InclusiveOr = (function(superClass) {
    extend(InclusiveOr, superClass);

    function InclusiveOr() {
      return InclusiveOr.__super__.constructor.apply(this, arguments);
    }

    return InclusiveOr;

  })(Collection);

  exports.Marking = Marking = (function(superClass) {
    extend(Marking, superClass);

    function Marking(value, marking) {
      this.value = value;
      this.marking = marking;
    }

    Marking.prototype.jsjs = function() {
      var k, v;
      return "({" + (((function() {
        var ref, results;
        ref = this.marking;
        results = [];
        for (k in ref) {
          v = ref[k];
          results.push((JSON.stringify(k)) + ":" + (v.jsjs()));
        }
        return results;
      }).call(this)).join(", ")) + "})";
    };

    Marking.prototype.ssjs = function() {
      return this.value.ssjs();
    };

    return Marking;

  })(Value);

  exports.FunctionalNotation = FunctionalNotation = (function(superClass) {
    extend(FunctionalNotation, superClass);

    function FunctionalNotation(name, arg) {
      this.name = name;
      this.arg = arg;
    }

    FunctionalNotation.prototype.jsjs = function() {
      return ("customFunctions[" + (JSON.stringify(this.name)) + "](") + this.arg.jsjs() + ")";
    };

    FunctionalNotation.prototype.ssjs = function() {
      return JSON.stringify((escape(this.name)) + "(") + " + " + this.arg.ssjs() + " + " + JSON.stringify(")");
    };

    return FunctionalNotation;

  })(Value);

}).call(this);
