// Generated by CoffeeScript 1.9.1
(function() {
  var VL, assert, escape,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  assert = require("../../helpers/assert");

  VL = exports;

  VL.escape = escape = function(s) {
    return s;
  };

  VL.Value = VL.Value = (function() {
    function Value() {}

    Value.prototype.toString = function() {
      var k, v;
      return "[" + this.constructor.name + " " + ((function() {
        var results;
        results = [];
        for (k in this) {
          v = this[k];
          if (this.hasOwnProperty(k)) {
            results.push(k + ":" + v);
          }
        }
        return results;
      }).call(this)) + "]";
    };

    return Value;

  })();

  VL.Constant = (function(superClass) {
    extend(Constant, superClass);

    function Constant() {
      return Constant.__super__.constructor.apply(this, arguments);
    }

    return Constant;

  })(VL.Value);

  VL.Keyword = (function(superClass) {
    extend(Keyword, superClass);

    function Keyword(value1) {
      this.value = value1;
    }

    Keyword.prototype.jsjs = function() {
      return JSON.stringify(this.value);
    };

    Keyword.prototype.ssjs = function() {
      return JSON.stringify("" + (escape(this.value)));
    };

    return Keyword;

  })(VL.Constant);

  VL.Percentage = (function(superClass) {
    extend(Percentage, superClass);

    function Percentage(value1) {
      this.value = value1;
    }

    Percentage.prototype.jsjs = function() {
      return JSON.stringify(this.value / 100);
    };

    Percentage.prototype.ssjs = function() {
      return JSON.stringify(this.value + "%");
    };

    return Percentage;

  })(VL.Constant);

  VL.Number = (function(superClass) {
    extend(Number, superClass);

    function Number(value1) {
      this.value = value1;
    }

    Number.prototype.jsjs = function() {
      return JSON.stringify(this.value);
    };

    Number.prototype.ssjs = function() {
      return JSON.stringify("" + this.value);
    };

    return Number;

  })(VL.Constant);

  VL.String = (function(superClass) {
    extend(String, superClass);

    function String(value1) {
      this.value = value1;
    }

    String.prototype.jsjs = function() {
      return JSON.stringify(this.value);
    };

    String.prototype.ssjs = function() {
      return JSON.stringify(JSON.stringify(this.value));
    };

    return String;

  })(VL.Constant);

  VL.Url = (function(superClass) {
    extend(Url, superClass);

    function Url(value1) {
      this.value = value1;
    }

    Url.prototype.jsjs = function() {
      return JSON.stringify(this.value);
    };

    Url.prototype.ssjs = function() {
      return JSON.stringify("url(" + (JSON.stringify(this.value)) + ")");
    };

    return Url;

  })(VL.Constant);

  VL.Dimension = (function(superClass) {
    extend(Dimension, superClass);

    function Dimension(value1, canonicalUnit) {
      this.value = value1;
      this.canonicalUnit = canonicalUnit;
    }

    Dimension.prototype.jsjs = function() {
      return this.value.jsjs();
    };

    Dimension.prototype.ssjs = function() {
      return (this.value.ssjs()) + "+" + (JSON.stringify(this.canonicalUnit));
    };

    return Dimension;

  })(VL.Constant);

  VL.EmptyValue = (function(superClass) {
    extend(EmptyValue, superClass);

    function EmptyValue() {
      return EmptyValue.__super__.constructor.apply(this, arguments);
    }

    EmptyValue.prototype.jsjs = function() {
      return "(void 0)";
    };

    EmptyValue.prototype.ssjs = function() {
      return JSON.stringify("");
    };

    return EmptyValue;

  })(VL.Constant);

  VL.Multiply = (function(superClass) {
    extend(Multiply, superClass);

    function Multiply(a, b) {
      this.a = a;
      this.b = b;
    }

    Multiply.prototype.jsjs = function() {
      return "(" + (this.a.jsjs()) + "*" + (this.b.jsjs()) + ")";
    };

    Multiply.prototype.ssjs = function() {
      return "(\"\"+" + (this.a.jsjs()) + "*" + (this.b.jsjs()) + ")";
    };

    return Multiply;

  })(VL.Value);

  VL.Color = (function(superClass) {
    extend(Color, superClass);

    function Color(arg) {
      this.r = arg.r, this.g = arg.g, this.b = arg.b, this.a = arg.a;
    }

    Color.prototype.jsjs = function() {
      return "{r:" + (this.r.jsjs()) + ", g:" + (this.g.jsjs()) + ", b:" + (this.b.jsjs()) + (this.a != null ? ", a:" + this.a.jsjs() : "") + "}";
    };

    Color.prototype.ssjs = function() {
      if (this.a != null) {
        return "'rgba('+Math.round(" + (this.r.ssjs()) + ")+','+Math.round(" + (this.g.ssjs()) + ")+','+Math.round(" + (this.b.ssjs()) + ")+','+Math.round(" + (this.a.ssjs()) + ")+')'";
      } else {
        return "'rgb('+Math.round(" + (this.r.ssjs()) + ")+','+Math.round(" + (this.g.ssjs()) + ")+','+Math.round(" + (this.b.ssjs()) + ")+')'";
      }
    };

    return Color;

  })(VL.Value);

  VL.Collection = (function(superClass) {
    extend(Collection, superClass);

    function Collection(value1) {
      this.value = value1;
    }

    Collection.prototype.delimiter = " ";

    Collection.prototype.unshift = function(x) {
      return this.value.unshift(x);
    };

    Collection.prototype.jsjs = function() {
      var i;
      return "[" + (((function() {
        var j, len, ref, results;
        ref = this.value;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          i = ref[j];
          results.push(i.jsjs());
        }
        return results;
      }).call(this)).join(", ")) + "]";
    };

    Collection.prototype.ssjs = function() {
      var e, elems, i;
      elems = (function() {
        var j, len, ref, results;
        ref = this.value;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          i = ref[j];
          results.push(i.ssjs());
        }
        return results;
      }).call(this);
      elems = (function() {
        var j, len, results;
        results = [];
        for (j = 0, len = elems.length; j < len; j++) {
          e = elems[j];
          if (e !== '""') {
            results.push(e);
          }
        }
        return results;
      })();
      if (elems.length) {
        return elems.join(" + " + (JSON.stringify(this.delimiter)) + " + ");
      } else {
        return JSON.stringify("");
      }
    };

    return Collection;

  })(VL.Value);

  VL.CommaDelimitedCollection = (function(superClass) {
    extend(CommaDelimitedCollection, superClass);

    function CommaDelimitedCollection() {
      return CommaDelimitedCollection.__super__.constructor.apply(this, arguments);
    }

    CommaDelimitedCollection.prototype.delimiter = ", ";

    return CommaDelimitedCollection;

  })(VL.Collection);

  VL.Juxtaposition = (function(superClass) {
    extend(Juxtaposition, superClass);

    function Juxtaposition() {
      return Juxtaposition.__super__.constructor.apply(this, arguments);
    }

    return Juxtaposition;

  })(VL.Collection);

  VL.And = (function(superClass) {
    extend(And, superClass);

    function And() {
      return And.__super__.constructor.apply(this, arguments);
    }

    return And;

  })(VL.Collection);

  VL.InclusiveOr = (function(superClass) {
    extend(InclusiveOr, superClass);

    function InclusiveOr() {
      return InclusiveOr.__super__.constructor.apply(this, arguments);
    }

    return InclusiveOr;

  })(VL.Collection);

  VL.Marking = (function(superClass) {
    extend(Marking, superClass);

    function Marking(value1, marking) {
      this.value = value1;
      this.marking = marking;
    }

    Marking.prototype.jsjs = function() {
      var k, v;
      return "({" + (((function() {
        var ref, results;
        ref = this.marking;
        results = [];
        for (k in ref) {
          v = ref[k];
          results.push((JSON.stringify(k)) + ":" + (v.jsjs()));
        }
        return results;
      }).call(this)).join(", ")) + "})";
    };

    Marking.prototype.ssjs = function() {
      return this.value.ssjs();
    };

    Marking.prototype.formalArguments = function() {
      var k, v;
      return ((function() {
        var ref, results;
        ref = this.marking;
        results = [];
        for (k in ref) {
          v = ref[k];
          results.push(k);
        }
        return results;
      }).call(this)).join(", ");
    };

    Marking.prototype.actualArguments = function() {
      var k, v;
      return ((function() {
        var ref, results;
        ref = this.marking;
        results = [];
        for (k in ref) {
          v = ref[k];
          results.push(v.jsjs());
        }
        return results;
      }).call(this)).join(", ");
    };

    Marking.prototype.get = function(name) {
      return this.marking[name];
    };

    Marking.prototype.toString = function() {
      var k, v;
      return "[Marking marking:{" + ((function() {
        var ref, results;
        ref = this.marking;
        results = [];
        for (k in ref) {
          v = ref[k];
          results.push(k + ":" + v);
        }
        return results;
      }).call(this)) + "} value:" + this.value + "]";
    };

    return Marking;

  })(VL.Value);

  VL.FunctionalNotation = (function(superClass) {
    extend(FunctionalNotation, superClass);

    function FunctionalNotation(name1, arg) {
      this.name = name1;
      this.arg = arg;
    }

    FunctionalNotation.prototype.jsjs = function() {
      return ("customFunctions[" + (JSON.stringify(this.name)) + "](") + this.arg.jsjs() + ")";
    };

    FunctionalNotation.prototype.ssjs = function() {
      return JSON.stringify((escape(this.name)) + "(") + " + " + this.arg.ssjs() + " + " + JSON.stringify(")");
    };

    return FunctionalNotation;

  })(VL.Value);

  VL.JavaScriptFunction = (function(superClass) {
    extend(JavaScriptFunction, superClass);

    function JavaScriptFunction(type, argument, block) {
      var ref;
      this.type = type;
      this.argument = argument;
      this.block = block;
      assert.hasProp({
        type: this.type
      }, "decodejs");
      assert.instanceOf({
        argument: this.argument
      }, VL.Marking);
      this.optimized = (ref = this.block.toString().match(/^\{ ?return ?([()a-zA-Z$_0-9+\/*.-][()a-zA-Z$_0-9+\/*. -]*) ?;? ?\}$/)) != null ? ref[1] : void 0;
    }

    JavaScriptFunction.prototype.jsjs = function() {
      var x;
      if (this.optimized) {
        x = (" " + this.optimized).replace(/([^a-zA-Z0-9$_.])([a-zA-Z$_][a-zA-Z$_0-9]*)/g, (function(_this) {
          return function(s) {
            var before, identifier, value;
            before = s.charAt(0);
            identifier = s.substr(1);
            if ((value = _this.argument.get(identifier)) != null) {
              return before + value.jsjs();
            } else {
              return before + identifier;
            }
          };
        })(this));
        return x;
      } else {
        return "(function(" + (this.argument.formalArguments()) + ")" + this.block + ")(" + (this.argument.actualArguments()) + ")";
      }
    };

    JavaScriptFunction.prototype.ssjs = function() {
      return this.type.decodejs(this.jsjs());
    };

    return JavaScriptFunction;

  })(VL.Value);

}).call(this);
