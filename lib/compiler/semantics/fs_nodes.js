// Generated by CoffeeScript 1.9.1
(function() {
  var Cascade, Definitions, ER, FS, GR, IG, Imports, Parser, SS, SelGrammar, Values, VdsGrammar, assert;

  ER = require("../errors/er_nodes");

  assert = require("../helpers/assert");

  Parser = require("../syntax/parser");

  SS = require("../syntax/ss_nodes");

  GR = require("../syntax/gr_nodes");

  VdsGrammar = require("./values/vds_grammar");

  Values = require("./values");

  IG = require("../generator/ig_nodes");

  Definitions = require("./definitions");

  Imports = require("./imports");

  Cascade = require("./cascade");

  SelGrammar = require("./selectors/sel_grammar");

  FS = exports;

  FS.FunctionalStylesheet = (function() {
    function FunctionalStylesheet(ss, options1) {
      var vds;
      this.options = options1;
      this.cascade = new Cascade(this);
      this.atRuleHandlers = {
        def: this.definitions = new Definitions(this),
        "import": this.imports = new Imports(this)
      };
      vds = (function(_this) {
        return function(str) {
          return VdsGrammar.parse(str).setFs(_this);
        };
      })(this);
      this._propertyTypes = {
        'font-family': vds("[[<family-name> | <generic-family>],]* [<family-name> | <generic-family>]"),
        'font-style': vds("normal | italic | oblique"),
        'font-variant': vds("normal | small-caps"),
        'font-weight': vds("normal | bold | bolder | lighter"),
        'font-size': vds("<absolute-size> | <relative-size> | <length> | <percentage>"),
        'font': vds("[ <'font-style'> || <'font-variant'> || <'font-weight'> ]? <'font-size'> [ / <'line-height'> ]? <'font-family'>"),
        'color': vds("<color>"),
        'background-image': vds("<url> | none"),
        'background-repeat': vds("repeat | repeat-x | repeat-y | no-repeat"),
        'background-attachment': vds("scroll | fixed"),
        'background-color': vds("<color> | transparent"),
        'background-position': vds("[<percentage> | <length>]{1,2} | [top | center | bottom] || [left | center | right]"),
        'background': vds("<'background-color'> || <'background-image'> || <'background-repeat'> || <'background-attachment'> || <'background-position'>"),
        'word-spacing': vds("normal | <length> "),
        'letter-spacing': vds("normal | <length> "),
        'text-decoration': vds("none | [ underline || overline || line-through || blink ]"),
        'vertical-align': vds("baseline | sub | super | top | text-top | middle | bottom | text-bottom | <percentage> "),
        'text-transform': vds("capitalize | uppercase | lowercase | none"),
        'text-align': vds("left | right | center | justify"),
        'text-indent': vds("<length> | <percentage>"),
        'line-height': vds("normal | <number> | <length> | <percentage>"),
        'margin-top': vds("<length> | <percentage> | auto"),
        'margin-right': vds("<length> | <percentage> | auto"),
        'margin-bottom': vds("<length> | <percentage> | auto"),
        'margin-left': vds("<length> | <percentage> | auto"),
        'margin': vds("[ <length> | <percentage> | auto ]{1,4} "),
        'padding-top': vds("<length> | <percentage>"),
        'padding-right': vds("<length> | <percentage>"),
        'padding-bottom': vds("<length> | <percentage>"),
        'padding-left': vds("<length> | <percentage>"),
        'padding': vds("[ <length> | <percentage> ]{1,4}"),
        'border-top-width': vds("thin | medium | thick | <length>"),
        'border-right-width': vds("thin | medium | thick | <length>"),
        'border-bottom-width': vds("thin | medium | thick | <length>"),
        'border-left-width': vds("thin | medium | thick | <length>"),
        'border-width': vds("[thin | medium | thick | <length>]{1,4}"),
        'border-color': vds("<color>{1,4}"),
        'border-style': vds("none | dotted | dashed | solid | double | groove | ridge | inset | outset"),
        'border-top': vds("<border-top-width> || <border-style> || <color>"),
        'border-right': vds("<border-right-width> || <border-style> || <color>"),
        'border-bottom': vds("<border-bottom-width> || <border-style> || <color>"),
        'border-left': vds("<border-left-width> || <border-style> || <color>"),
        'border': vds("<border-width> || <border-style> || <color>"),
        'width': vds("<length> | <percentage> | auto"),
        'height': vds("<length> | auto"),
        'float': vds("left | right | none"),
        'clear': vds("none | left | right | both"),
        'display': vds("block | inline | list-item | none"),
        'white-space': vds("normal | pre | nowrap"),
        'list-style-type': vds("disc | circle | square | decimal | lower-roman | upper-roman | lower-alpha | upper-alpha | none"),
        'list-style-image': vds("<url> | none"),
        'list-style-position': vds("inside | outside"),
        'list-style': vds("[disc | circle | square | decimal | lower-roman | upper-roman | lower-alpha | upper-alpha | none] || [inside | outside] || [<url> | none]"),
        'opacity': vds("<number>"),
        'content': vds("none | [<string>]+"),
        'transform': vds("none | rotate(<angle>)"),
        'top': vds("<length>"),
        'left': vds("<length>")
      };
      this._typeStack = [
        Values.primitiveTypes, {
          'family-name': vds("<string>"),
          'generic-family': vds("serif|sans-serif|cursive|fantasy|monospace"),
          'absolute-size': vds("[ xx-small | x-small | small | medium | large | x-large | xx-large ]"),
          'relative-size': vds("[ larger | smaller ]")
        }, {}
      ];
      if (ss != null) {
        this.consume_stylesheet(ss);
      }
    }

    FunctionalStylesheet.prototype.getPropertyType = function(name, require) {
      var type;
      if (require == null) {
        require = true;
      }
      if ((type = this._propertyTypes[name]) != null) {
        return type;
      }
      if (require) {
        throw new ER.UnknownProperty(name);
      }
    };

    FunctionalStylesheet.prototype.setPropertyType = function(name, newType) {
      var oldType;
      oldType = this.getPropertyType(name, false);
      return this._propertyTypes[name] = oldType != null ? new GR.ExclusiveOr(oldType, newType) : newType;
    };

    FunctionalStylesheet.prototype.getType = function(name, require) {
      var i, j, ref, type;
      if (require == null) {
        require = true;
      }
      for (i = j = ref = this._typeStack.length - 1; ref <= 0 ? j <= 0 : j >= 0; i = ref <= 0 ? ++j : --j) {
        if ((type = this._typeStack[i][name]) != null) {
          if (console.debug) {
            console.debug("read type <" + name + "> = " + type);
          }
          return type;
        }
      }
      if (require) {
        throw new ER.UnknownType(name);
      }
    };

    FunctionalStylesheet.prototype.setType = function(name, newType) {
      var oldType, type;
      if (console.debug) {
        console.debug("saved type <" + name + "> = " + newType);
      }
      assert.present({
        name: name
      });
      oldType = this.getType(name, false);
      this._typeStack[this._typeStack.length - 1][name] = oldType != null ? (type = new GR.ExclusiveOr(newType, oldType).setFs(this), type.decodejs = oldType.decodejs, type) : newType;
      return oldType;
    };

    FunctionalStylesheet.prototype.pushScope = function() {
      if (typeof console.debug === "function") {
        console.debug("pushed stack");
      }
      this._typeStack.push({});
    };

    FunctionalStylesheet.prototype.popScope = function() {
      if (typeof console.debug === "function") {
        console.debug("popped stack");
      }
      this._typeStack.pop({});
    };

    FunctionalStylesheet.prototype.consume_stylesheet = function(ss) {
      var j, len, ref, rule;
      ref = ss.value;
      for (j = 0, len = ref.length; j < len; j++) {
        rule = ref[j];
        if (rule instanceof SS.QualifiedRule) {
          this.consume_qualified_rule(rule);
        } else if (rule instanceof SS.AtRule) {
          this.consume_at_rule(rule);
        } else {
          throw new Error("Internal error in FunCSS: Unknown rule type in SS.Stylesheet");
        }
      }
    };

    FunctionalStylesheet.prototype.consume_at_rule = function(rule) {
      var handler;
      handler = this.atRuleHandlers[rule.name];
      if (handler == null) {
        throw new ER.UnknownAtRule(rule.name);
      }
      handler.consume_at_rule(rule);
    };

    FunctionalStylesheet.prototype.consume_qualified_rule = function(qrule) {
      var decl, j, len, ref, sel;
      sel = SelGrammar.parse(qrule.prelude);
      ref = Parser.parse_list_of_declarations(qrule.value.value);
      for (j = 0, len = ref.length; j < len; j++) {
        decl = ref[j];
        this.cascade.consume_declaration(sel, decl);
      }
    };

    FunctionalStylesheet.prototype.ig = function(options) {
      var ig;
      ig = new IG.FunctionBlock;
      if (options.includeTracker !== false) {
        ig.push(new IG.Require("tracker"));
      }
      if (options.includeReactiveVar !== false) {
        ig.push(new IG.Require("reactive-var"));
      }
      ig.push(this.definitions.ig());
      ig.push(this.cascade.ig());
      return ig;
    };

    return FunctionalStylesheet;

  })();

  FS.SimpleRule = (function() {
    function SimpleRule(opts) {
      this.mediaQuery = opts.mediaQuery, this.selector = opts.selector, this.name = opts.name, this.value = opts.value, this.important = opts.important;
    }

    SimpleRule.prototype.isConstantMediaQuery = function() {
      return false;
    };

    SimpleRule.prototype.isConstantValue = function() {
      return false;
    };

    SimpleRule.prototype.isConstantSelector = function() {
      return false;
    };

    SimpleRule.prototype.selectorSpecificity = function() {
      return [0, 0, 0];
    };

    return SimpleRule;

  })();

}).call(this);
