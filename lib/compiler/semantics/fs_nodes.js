// Generated by CoffeeScript 1.9.1
(function() {
  var Cascade, Definitions, ER, FS, GR, IG, Parser, SS, SelGrammar, Values, VdsGrammar, vds;

  ER = require("../errors/er_nodes");

  Parser = require("../syntax/parser");

  SS = require("../syntax/ss_nodes");

  GR = require("../syntax/gr_nodes");

  VdsGrammar = require("./values/vds_grammar");

  Values = require("./values");

  IG = require("../generator/ig_nodes");

  Definitions = require("./definitions");

  Cascade = require("./cascade");

  SelGrammar = require("./selectors/sel_grammar");

  FS = exports;

  vds = function(str) {
    return VdsGrammar.parse(str);
  };

  FS.FunctionalStylesheet = (function() {
    function FunctionalStylesheet(ss) {
      this.definitions = new Definitions(this);
      this.cascade = new Cascade(this);
      this.atRuleHandlers = {
        def: this.definitions
      };
      this._propertyTypes = {
        'background-color': vds("<ident>"),
        'background': vds("<ident>"),
        'opacity': vds("<number>")
      };
      this._typeStack = [Values.primitiveTypes, {}];
      this._dimensionStack = [Values.dimensions, {}];
      if (ss != null) {
        this.consume_stylesheet(ss);
      }
    }

    FunctionalStylesheet.prototype.getPropertyType = function(name, require) {
      var type;
      if (require == null) {
        require = true;
      }
      if ((type = this._propertyTypes[name]) != null) {
        return type;
      }
      if (require) {
        throw new ER.UnknownProperty(name);
      }
    };

    FunctionalStylesheet.prototype.setPropertyType = function(name, newType) {
      var oldType;
      oldType = this.getPropertyType(name, false);
      return this._propertyTypes[name] = oldType != null ? new GR.ExclusiveOr(oldType, newType) : newType;
    };

    FunctionalStylesheet.prototype.getType = function(name, require) {
      var i, j, ref, type;
      if (require == null) {
        require = true;
      }
      for (i = j = ref = this._typeStack.length - 1; ref <= 0 ? j <= 0 : j >= 0; i = ref <= 0 ? ++j : --j) {
        if ((type = this._typeStack[i][name]) != null) {
          return type;
        }
      }
      if (require) {
        throw new ER.UnknownType(name);
      }
    };

    FunctionalStylesheet.prototype.setType = function(name, newType) {
      debugger;
      var oldType;
      oldType = this.getType(name, false);
      this._typeStack[this._typeStack.length - 1][name] = oldType != null ? new GR.ExclusiveOr(oldType, newType).setFs(this) : newType;
    };

    FunctionalStylesheet.prototype.push_scope = function() {
      this._typeStack.push({});
      this._dimensionStack.push({});
    };

    FunctionalStylesheet.prototype.pop_scope = function() {
      this._typeStack.pop({});
      this._dimensionStack.pop({});
    };

    FunctionalStylesheet.prototype.consume_stylesheet = function(ss) {
      var j, len, ref, rule;
      ref = ss.value;
      for (j = 0, len = ref.length; j < len; j++) {
        rule = ref[j];
        if (rule instanceof SS.QualifiedRule) {
          this.consume_qualified_rule(rule);
        } else if (rule instanceof SS.AtRule) {
          this.consume_at_rule(rule);
        } else {
          throw new Error("Internal error in FunCSS: Unknown rule type in SS.Stylesheet");
        }
      }
    };

    FunctionalStylesheet.prototype.consume_at_rule = function(rule) {
      var handler;
      handler = this.atRuleHandlers[rule.name];
      if (handler == null) {
        throw new ER.UnknownAtRule(rule.name);
      }
      handler.consume_at_rule(rule);
    };

    FunctionalStylesheet.prototype.consume_qualified_rule = function(qrule) {
      var decl, j, len, ref, sel;
      sel = SelGrammar.parse(qrule.prelude);
      ref = Parser.parse_list_of_declarations(qrule.value.value);
      for (j = 0, len = ref.length; j < len; j++) {
        decl = ref[j];
        this.cascade.consume_declaration(sel, decl);
      }
    };

    FunctionalStylesheet.prototype.ig = function() {
      var ig;
      ig = new IG.FunctionBlock;
      ig.push(this.definitions.ig());
      ig.push(this.cascade.ig());
      return ig;
    };

    return FunctionalStylesheet;

  })();

  FS.SimpleRule = (function() {
    function SimpleRule(opts) {
      this.mediaQuery = opts.mediaQuery, this.selector = opts.selector, this.name = opts.name, this.value = opts.value, this.important = opts.important;
    }

    SimpleRule.prototype.isConstantMediaQuery = function() {
      return false;
    };

    SimpleRule.prototype.isConstantValue = function() {
      return false;
    };

    SimpleRule.prototype.isConstantSelector = function() {
      return false;
    };

    SimpleRule.prototype.selectorSpecificity = function() {
      return [0, 0, 0];
    };

    return SimpleRule;

  })();

}).call(this);
