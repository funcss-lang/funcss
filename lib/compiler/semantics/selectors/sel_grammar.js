// Generated by CoffeeScript 1.9.1
(function() {
  var ChildCombinator, ClassSelector, Colon, Combinable, Combinator, Combined, Dot, GR, IdSelector, PLACEHOLDER, Pseudoelementable, Pseudoelemented, SL, SS, Selector, SelectorGroup, SimpleSelector, Snd, TypeSelector;

  GR = require("../../syntax/gr_nodes");

  SL = require("./sl_nodes");

  SS = require("../../syntax/ss_nodes");

  Colon = new GR.DelimLike(new SS.ColonToken);

  Dot = new GR.DelimLike(new SS.DelimToken('.'));

  Snd = function(_, y) {
    return y;
  };

  PLACEHOLDER = {
    parse: function() {
      throw new Error("PLACEHOLDER not replaced");
    }
  };

  TypeSelector = new GR.Ident(function(x) {
    return new SL.TypeSelector(x.value);
  });

  ClassSelector = new GR.CloselyJuxtaposed(Dot, new GR.Ident(function(x) {
    return new SL.ClassSelector(x.value);
  }), Snd);

  IdSelector = new GR.Hash(function(x) {
    return new SL.IdSelector(x.value);
  });

  SimpleSelector = new GR.ExclusiveOr(TypeSelector, new GR.ExclusiveOr(ClassSelector, IdSelector));

  Combinable = SimpleSelector;

  ChildCombinator = new GR.DelimLike(new SS.DelimToken('>'), function() {
    return SL.ChildCombinator;
  });

  Combinator = new GR.Optional(ChildCombinator, function(x) {
    return x != null ? x : SL.DescendantCombinator;
  });

  Combined = new GR.Juxtaposition(Combinable, new GR.Optional(new GR.Juxtaposition(Combinator, PLACEHOLDER, function(comb, tail) {
    return [comb, tail];
  })), function(head, comb_tail) {
    var comb, tail;
    if (comb_tail != null) {
      comb = comb_tail[0], tail = comb_tail[1];
      return new comb(head, tail);
    } else {
      return head;
    }
  });

  Combined.b.a.b = Combined;

  Pseudoelementable = Combined;

  Pseudoelemented = new GR.CloselyJuxtaposed(Pseudoelementable, new GR.Optional(new GR.CloselyJuxtaposed(Colon, new GR.CloselyJuxtaposed(Colon, new GR.Ident(function(x) {
    return x.value;
  }), Snd), Snd)), function(x, y) {
    if (y) {
      return new SL.Pseudoelement(y, x);
    } else {
      return x;
    }
  });

  Selector = Pseudoelemented;

  SelectorGroup = new GR.DelimitedByComma(Selector);

  module.exports = SelectorGroup;

}).call(this);
