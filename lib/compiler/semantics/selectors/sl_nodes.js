// Generated by CoffeeScript 1.9.2
(function() {
  var Combinator, CombinedSelector, Selector, SelectorGroup, SimpleSelector, SimpleSelectorGroup, TypeSelector,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  exports.Selector = Selector = (function() {
    function Selector() {}

    return Selector;

  })();

  exports.SelectorGroup = SelectorGroup = (function(superClass) {
    extend(SelectorGroup, superClass);

    function SelectorGroup(value) {
      this.value = value;
    }

    SelectorGroup.prototype.toString = function() {
      return this.value.join(", ");
    };

    return SelectorGroup;

  })(Selector);

  exports.CombinedSelector = CombinedSelector = (function(superClass) {
    extend(CombinedSelector, superClass);

    function CombinedSelector(head1, combinator1, tail1) {
      this.head = head1;
      this.combinator = combinator1;
      this.tail = tail1;
    }

    CombinedSelector.prototype.toString = function() {
      return "" + head + combinator + tail;
    };

    return CombinedSelector;

  })(Selector);

  exports.CombinedSelector = CombinedSelector = (function(superClass) {
    extend(CombinedSelector, superClass);

    function CombinedSelector() {
      return CombinedSelector.__super__.constructor.apply(this, arguments);
    }

    return CombinedSelector;

  })(Selector);

  exports.Combinator = Combinator = (function(superClass) {
    extend(Combinator, superClass);

    function Combinator() {
      return Combinator.__super__.constructor.apply(this, arguments);
    }

    return Combinator;

  })(Selector);

  exports.SimpleSelectorGroup = SimpleSelectorGroup = (function(superClass) {
    extend(SimpleSelectorGroup, superClass);

    function SimpleSelectorGroup() {
      return SimpleSelectorGroup.__super__.constructor.apply(this, arguments);
    }

    return SimpleSelectorGroup;

  })(Selector);

  exports.SimpleSelector = SimpleSelector = (function(superClass) {
    extend(SimpleSelector, superClass);

    function SimpleSelector() {
      return SimpleSelector.__super__.constructor.apply(this, arguments);
    }

    return SimpleSelector;

  })(Selector);

  exports.TypeSelector = TypeSelector = (function(superClass) {
    extend(TypeSelector, superClass);

    function TypeSelector(nodeName) {
      this.nodeName = nodeName;
    }

    TypeSelector.prototype.toString = function() {
      return "" + this.nodeName;
    };

    return TypeSelector;

  })(SimpleSelector);

}).call(this);
