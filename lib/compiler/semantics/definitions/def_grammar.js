// Generated by CoffeeScript 1.9.1
(function() {
  var Colon, DF, Definable, DefinableWithOptionalType, DefinitionPrelude, Dollar, Equals, FunctionalNotation, GR, Parser, SS, SignatureWithOptionalDefinition, Snd, VariableName, VdsGrammar;

  Parser = require("../../syntax/parser");

  SS = require("../../syntax/ss_nodes");

  GR = require("../../syntax/gr_nodes");

  VdsGrammar = require("../values/vds_grammar");

  DF = require("./df_nodes");

  Snd = function(_, y) {
    return y;
  };

  Colon = new GR.DelimLike(new SS.ColonToken);

  Equals = new GR.DelimLike(new SS.DelimToken("="));

  Dollar = new GR.DelimLike(new SS.DelimToken("$"));

  VariableName = new GR.ExclusiveOr(new GR.Ident(function(x) {
    return new DF.VariableName(x.value);
  }), new GR.CloselyJuxtaposed(Dollar, new GR.Ident(function(x) {
    return new DF.VariableName('$' + x.value);
  }), Snd));

  FunctionalNotation = new GR.AnyFunctionalNotation(VdsGrammar.OptionalRoot, function(name, argument) {
    return new DF.FunctionalNotation(name, argument);
  });

  Definable = new GR.ExclusiveOr(VariableName, FunctionalNotation);

  DefinableWithOptionalType = new GR.Juxtaposition(Definable, new GR.Optional(new GR.Juxtaposition(Colon, new GR.Ident, Snd)), function(definable, typeName) {
    return [definable, typeName];
  });

  SignatureWithOptionalDefinition = new GR.Juxtaposition(DefinableWithOptionalType, new GR.Optional(new GR.Juxtaposition(Equals, new GR.RawTokens(), Snd)), function(arg, rawValue) {
    var definable, typeName;
    definable = arg[0], typeName = arg[1];
    return new DF.Definition(definable, typeName, rawValue);
  });

  DefinitionPrelude = SignatureWithOptionalDefinition;

  exports.parseStatement = function(s) {
    var def;
    def = new GR.Optional(DefinitionPrelude).parse(s.prelude);
    if (def != null) {
      if ((def.rawValue != null) && (s.block != null)) {
        throw new ER.SyntaxError("Definition has both CSS and JS body. " + s);
      }
      def.block = s.block;
      return def;
    }
  };

  exports.parse = function(str) {
    return this.parseStatement(Parser.parse_a_statement(str));
  };

}).call(this);
