// Generated by CoffeeScript 1.9.1
(function() {
  var DF, FS, GR, SS, Snd, VL, assert,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  SS = require("../../syntax/ss_nodes");

  GR = require("../../syntax/gr_nodes");

  assert = require("../../helpers/assert");

  FS = require("../fs_nodes");

  VL = require("../values/vl_nodes");

  DF = exports;

  Snd = function(_, y) {
    return y;
  };

  DF.Definable = (function() {
    function Definable() {}

    return Definable;

  })();

  DF.VariableName = (function(superClass) {
    extend(VariableName, superClass);

    function VariableName(value1) {
      this.value = value1;
    }

    VariableName.prototype.grammar = function(semantic) {
      if (this.value.charAt(0) === "$") {
        return new GR.CloselyJuxtaposed(new GR.DelimLike(new SS.DelimToken('$')), new GR.Keyword(this.value.substr(1)), semantic);
      } else {
        return new GR.Keyword(this.value.substr(1), semantic);
      }
    };

    return VariableName;

  })(DF.Definable);

  DF.FunctionalNotation = (function(superClass) {
    extend(FunctionalNotation, superClass);

    function FunctionalNotation(name, argument) {
      this.name = name;
      this.argument = argument;
    }

    FunctionalNotation.prototype.grammar = function(semantic) {
      return new GR.FunctionalNotation(this.name, this.argument, semantic);
    };

    return FunctionalNotation;

  })(DF.Definable);

  DF.Definition = (function() {
    function Definition(definable, typeName, rawValue, block) {
      this.definable = definable;
      this.typeName = typeName;
      this.rawValue = rawValue;
      this.block = block;
    }

    Definition.prototype.grammar = function(fs) {
      var gr, type, value;
      assert.instanceOf({
        fs: fs
      }, FS.FunctionalStylesheet);
      if (this.definable instanceof DF.VariableName) {
        if (this.typeName == null) {
          throw new ER.TypeInferenceNotImplemented(this.definable);
        }
        type = fs.getType(this.typeName);
        if (type == null) {
          throw new ER.UnknownType(this.typeName);
        }
        if (this.rawValue != null) {
          value = this.type.parse(this.rawValue);
          gr = this.definable.grammar(function() {
            return value;
          });
        } else if (this.block) {
          value = new VL.JavaScriptFunction(this.type, this.block);
          gr = this.definable.grammar(function() {
            return value;
          });
        } else {
          throw new ER.SyntaxError("Definition does not have a body.");
        }
      } else if (this.definable instanceof DF.FunctionalNotation) {
        gr = this.definable.grammar(function() {
          value = fs.types[this.typeName].parse(this.rawValue);
          return value;
        });
      } else {
        throw new Error("Internal Error in FunCSS: unknown definable type");
      }
      gr.setFs(fs);
      return gr;
    };

    return Definition;

  })();

}).call(this);
