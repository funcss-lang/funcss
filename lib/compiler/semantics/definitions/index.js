// Generated by CoffeeScript 1.9.1
(function() {
  var DefGrammar, Definitions, ER, GR, IG, Parser, SS, Sel, Semantics, VdsGrammar;

  ER = require("../../errors/er_nodes");

  Parser = require("../../syntax/parser");

  SS = require("../../syntax/ss_nodes");

  GR = require("../../syntax/gr_nodes");

  Semantics = require("../");

  Sel = require("../selectors/sel_grammar");

  VdsGrammar = require("../values/vds_grammar");

  DefGrammar = require("./def_grammar");

  IG = require("../../generator/ig_nodes");

  require("../../syntax/statements");

  module.exports = Definitions = (function() {
    function Definitions(fs) {
      this.fs = fs;
    }

    Definitions.prototype.consume_at_rule = function(atrule) {
      var def, i, len, s, statements;
      if (atrule.value === void 0) {
        throw new ER.BlockRequired("@def");
      }
      new GR.Empty().parse(atrule.prelude, '{');
      statements = Parser.parse_list_of_statements(atrule.value.value);
      for (i = 0, len = statements.length; i < len; i++) {
        s = statements[i];
        def = DefGrammar.parseStatement(s);
        if (def != null) {
          this.consume_definition(def);
        }
      }
    };

    Definitions.prototype.consume_definition = function(def) {
      var newType;
      if (def.typeName == null) {
        throw new ER.TypeInferenceNotImplemented(def.definable);
      }
      newType = def.grammar(this.fs);
      this.fs.setType(def.typeName, newType);
    };

    Definitions.prototype.ig = function() {
      return new IG.Empty;
    };

    return Definitions;

  })();

}).call(this);
